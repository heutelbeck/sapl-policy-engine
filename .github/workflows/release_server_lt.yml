name: Release SAPL Server LT
on: workflow_dispatch 

permissions:
  contents: read

jobs:
  # Job to build artifact
  build:
    name: Build and release artifact
    runs-on: ubuntu-latest
    permissions:
      actions: read # To read the workflow path
    outputs:
      # Hash of the artifact
      hashes: ${{ steps.hash.outputs.hashes }}
    steps:
      - name: Check out
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
            lfs: true
            fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93 # v4.0.0
        with:
          distribution: 'temurin'
          java-version: 21
          cache: 'maven'

      - name: Setup Maven
        uses: stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1 # v5
        with:
          maven-version: 3.9.6

      # Import the GPG key and make it available
      - name: Install GPG Code Signing Key
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
      
      # Build artifact
      - name: Build sapl-server-lt
        id: build
        run: |
          mvn -B --no-transfer-progress -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} -pl sapl-server-lt -am -Prelease -DskipTests clean package deploy
          
          # Save the location of the maven output files for easier reference
          ARTIFACT_PATTERN=sapl-server-lt/target/sapl-server-lt-*.jar
          echo "artifact_pattern=$ARTIFACT_PATTERN" >> "$GITHUB_OUTPUT"

          
       # Generate hashes of the artifact
      - name: Generate subject
        id: hash
        run: |
          echo "hashes=$(sha256sum ${{ steps.build.outputs.artifact_pattern }} | base64 -w0)" >> "$GITHUB_OUTPUT"

      # Upload the artifact and additional files
      - name: Upload artifact and signature
        uses: actions/upload-artifact@v3.1.3 
        with:
          if-no-files-found: error 
          path: |
            sapl-server-lt/target/sapl-server-lt-*.jar
            sapl-server-lt/target/sapl-server-lt-*.jar.asc
            sapl-server-lt/target/sapl-server-lt-*.jar.sha1
            sapl-server-lt/target/sapl-server-lt-*.jar.md5
            sapl-server-lt/target/site/io.*.spdx.json

  # Create provenance for the artifact
  provenance:
    needs: [ build ]
    permissions:
      actions: read # To read the workflow path
      id-token: write # To sign the provenance
      contents: write # To add assets to a release
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
    with:
      base64-subjects: ${{ needs.build.outputs.hashes }}
      upload-assets: true # Optional: Upload to a new release

  # Verify the provenance of artifact
  verify:
    needs: [ build, provenance ]
    runs-on: ubuntu-latest
    permissions:
      actions: read # To read the workflow path
    steps:
      - uses: slsa-framework/slsa-verifier/actions/installer@7e1e47d7d793930ab0082c15c2b971fdb53a3c95  # v2.4.1

      - name: Download the artifact
        uses: actions/download-artifact@v3.0.2

      # SLSA provenance verification using slsa-verifier
      - name: Verify SLSA Provenance (slsa-verifier)
        run: |
          slsa-verifier verify-artifact ./**/sapl-server-lt*.jar  --source-uri "github.com/$GITHUB_REPOSITORY" --provenance-path "./${{ needs.provenance.outputs.provenance-name}}/${{ needs.provenance.outputs.provenance-name}}"