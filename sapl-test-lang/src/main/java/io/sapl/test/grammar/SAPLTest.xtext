grammar io.sapl.test.^grammar.SAPLTest with org.eclipse.xtext.common.Terminals

generate sAPLTest "http://www.sapl.io/test/grammar/SAPLTest"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

SAPLTest:
    (elements+=TestSuite)*;

terminal IMPORT_NAME: ('a'..'z')+'.'('a'..'z'|'A'..'Z'|'0'..'9')+;

TestSuite:
	policy=ID 'tests' '{'
		(testCases+=TestCase)+
	'}';

WhenStep:
	 'when' authorizationSubscription=AuthorizationSubscription;

ExpectMatcher:
    {AuthorizationDecisionMatcher} decision=AuthorizationDecision |
    {ObligationMatcher} 'obligation' value=STRING;

ParameterMatcher:
    {Equals} value=Value |
    {Any} 'any';

FunctionParameters:
    matchers+=ParameterMatcher (',' matchers+=ParameterMatcher)*;

GivenStep:
	{Function} 'function' importName=IMPORT_NAME ('called with' parameters=FunctionParameters)? 'returning' return=Value ('and' 'is' 'invoked' amount=NumericAmount)? |
	{FunctionInvokedOnce} 'function' importName=IMPORT_NAME 'returns' return+=Value (',' return+=Value)* 'once' |
	{Attribute} 'attribute' importName=IMPORT_NAME ('returns' return+=Value (',' return+=Value)* ('for' amount=TemporalAmount)?)? |
	{AttributeWithParameters} 'attribute' importName=IMPORT_NAME 'with' 'parent' 'value' parentMatcher=ParameterMatcher ('and' 'parameters' parameters+=Value (',' parameters+=Value)+)? 'returns' return=Value |
	{VirtualTime} 'virtualTime' |
    {Pip} 'PIP' pip=ID |
    {Library} 'functionLibrary' library=FunctionLibrary |
    {Variable} 'variable' 'key' key=ID 'value' value=ID;

enum FunctionLibrary:
	FILTER='FilterFunctionLibrary' | LOGGING='LoggingFunctionLibrary' | STANDARD='StandardFunctionLibrary' | TEMPORAL='TemporalFunctionLibrary';

enum AuthorizationDecision:
	PERMIT='permit' | DENY='deny' | INDETERMINATE='indeterminate' | NOT_APPLICABLE='notApplicable';

AuthorizationSubscriptionElement:
    {Plain} value=ID |
    {Structured} elements+=JsonElement (',' elements+=JsonElement)*;

AuthorizationSubscription:
	subject=AuthorizationSubscriptionElement 'attempts' action=AuthorizationSubscriptionElement 'on' resource=AuthorizationSubscriptionElement;

NumericAmount:
    {Once} 'once' |
    {Multiple} amount=JSONNUMBER 'times';

TemporalAmount: seconds=JSONNUMBER's';

ExpectOrAdjustmentStep:
    ExpectStep | AdjustmentStep;

ExpectStep returns ExpectOrAdjustmentStep:
	{Next} 'expect' expectedDecision=AuthorizationDecision amount=NumericAmount |
	{NextWithMatcher} 'expect' 'decision' 'matching' matcher+=ExpectMatcher (',' matcher+=ExpectMatcher)* |
	{NoEvent} 'no event for' duration=TemporalAmount;

AdjustmentStep returns ExpectOrAdjustmentStep:
    {AttributeAdjustment} 'let' attribute=IMPORT_NAME 'return' returnValue=Value |
	{Await} 'wait' duration=TemporalAmount;

JsonElement:
    'key' key=STRING 'value' value=STRING;

ExpectChain:
	{SingleExpect} 'expect' 'single' decision=AuthorizationDecision ('with' 'obligation' obligationElements+=JsonElement (',' obligationElements+=JsonElement)*)? ('with' 'resource' resourceElements+=JsonElement (',' resourceElements+=JsonElement)*)?|
	{TestException} 'expect' 'exception' |
	{RepeatedExpect} expectSteps+=ExpectOrAdjustmentStep ('then' expectSteps+=ExpectOrAdjustmentStep)*;

TestCase:
	'scenario' name=STRING ('given' givenSteps+=GivenStep ('and' givenSteps+=GivenStep)*)? whenStep=WhenStep 'then' expect=ExpectChain';';

Value:
	Object | Array | NumberLiteral | StringLiteral | BooleanLiteral | NullLiteral | UndefinedLiteral ;

Object returns Value:
	{Object} '{' (members+=Pair (',' members+=Pair)*)? '}' ;

Pair:
	key=STRING ':' value=Value;

Array returns Value:
	{Array} '[' (items+=Value (',' items+=Value)*)? ']' ;

BooleanLiteral returns Value:
	  {TrueLiteral} 'true'
	| {FalseLiteral} 'false' ;

NullLiteral returns Value:
	{NullLiteral} 'null' ;

UndefinedLiteral returns Value:
	{UndefinedLiteral} 'undefined' ;

StringLiteral returns Value:
	{StringLiteral} string=STRING ;

NumberLiteral returns Value:
	{NumberLiteral} number=JSONNUMBER ;

terminal JSONNUMBER returns ecore::EBigDecimal: // Definition according to JSON standard  Unary operator for negation/plus prefix
	('0' | ('1'..'9') DIGIT*) ('.' DIGIT+)? (('E' | 'e') ('+' | '-')? DIGIT+)? ;

terminal fragment DIGIT:
	('0'..'9') ;