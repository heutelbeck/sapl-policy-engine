/*
 * Copyright (C) 2017-2024 Dominic Heutelbeck (dominic@heutelbeck.com)
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
grammar io.sapl.test.^grammar.SAPLTest with org.eclipse.xtext.common.Terminals
hidden(ML_COMMENT, SL_COMMENT, WS)

generate sapltest "http://www.sapl.io/test/grammar/SAPLTest"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

SAPLTest:
    (requirements+=Requirement)+;

// Terminals

terminal JSONNUMBER returns ecore::EBigDecimal: // Definition according to JSON standard
	('+' | '-')? ('0' | ('1'..'9') DIGIT*) ('.' DIGIT+)? (('E' | 'e') ('+' | '-')? DIGIT+)? ;

terminal fragment DIGIT:
	('0'..'9') ;

// Enums

enum CombiningAlgorithmEnum:
    DENY_OVERRIDES='deny-overrides' | PERMIT_OVERRIDES='permit-overrides' | ONLY_ONE_APPLICABLE='only-one-applicable' | DENY_UNLESS_PERMIT='deny-unless-permit' | PERMIT_UNLESS_DENY='permit-unless-deny';

enum AuthorizationDecisionMatcherType:
    OBLIGATION='obligation' | ADVICE='advice';

enum AuthorizationDecisionType:
	PERMIT='permit' | DENY='deny' | INDETERMINATE='indeterminate' | NOT_APPLICABLE='notApplicable';

enum ImportType:
	PIP='pip' | STATIC_PIP='static-pip' | FUNCTION_LIBRARY='function-library' | STATIC_FUNCTION_LIBRARY='static-function-library';

// Matchers
JsonArrayMatcher: '[' matchers+=JsonNodeMatcher (',' matchers+=JsonNodeMatcher)* ']';

JsonObjectMatcherPair: key=STRING 'is' matcher=JsonNodeMatcher;

JsonObjectMatcher: '{' members+=JsonObjectMatcherPair ('and' members+=JsonObjectMatcherPair)* '}';

JsonNodeMatcher:
    {IsJsonNull} 'null' |
    {IsJsonText} 'text' (matcher=StringOrStringMatcher)? |
    {IsJsonNumber} 'number' (number=JSONNUMBER)? |
    {IsJsonBoolean} 'boolean' (literal=BooleanLiteral)? |
    {IsJsonArray} 'array' ('where' matcher=JsonArrayMatcher)? |
    {IsJsonObject} 'object' ('where' matcher=JsonObjectMatcher)?;

StringOrStringMatcher:
    {PlainString} text=STRING | StringMatcher;

ValMatcher:
    {AnyVal} 'any' |
    {ValWithValue} value=Value |
    {ValWithMatcher} 'matching' matcher=JsonNodeMatcher;

DefaultObjectMatcher:
    {ObjectWithExactMatch} 'equals' equalTo=Value |
    {ObjectWithMatcher} 'matching' matcher=JsonNodeMatcher;

ExtendedObjectMatcher:
    DefaultObjectMatcher |
    {ObjectWithKeyValueMatcher} 'containing' 'key' key=STRING ('with' 'value' 'matching' matcher=JsonNodeMatcher)?;

AuthorizationDecisionMatcher:
    {AnyDecision} 'any' |
    {IsDecision} 'is' decision=AuthorizationDecisionType |
    {HasObligationOrAdvice} 'with' type=AuthorizationDecisionMatcherType (matcher=ExtendedObjectMatcher)? |
    {HasResource} 'with' 'resource' (matcher=DefaultObjectMatcher)?;

StringMatcher:
    {StringIsNull} 'null' |
    {StringIsBlank} 'blank' |
    {StringIsEmpty} 'empty' |
    {StringIsNullOrEmpty} 'null-or-empty' |
    {StringIsNullOrBlank} 'null-or-blank' |
    {StringIsEqualWithCompressedWhiteSpace} 'equal' 'to' value=STRING 'with' 'compressed' 'whitespace' |
    {StringIsEqualIgnoringCase} 'equal' 'to' value=STRING 'case-insensitive' |
    {StringMatchesRegex} 'with' 'regex' regex=STRING |
    {StringStartsWith} 'starting' 'with' prefix=STRING (caseInsensitive?='case-insensitive')? |
    {StringEndsWith} 'ending' 'with' postfix=STRING (caseInsensitive?='case-insensitive')? |
    {StringContains} 'containing' text=STRING (caseInsensitive?='case-insensitive')? |
    {StringContainsInOrder} 'containing' 'stream' substrings+=STRING (',' substrings+=STRING)* 'in' 'order' |
    {StringWithLength} 'with' 'length' length=JSONNUMBER;

//SAPL Value Definition

Value:
	Object | Array | NumberLiteral | StringLiteral | BooleanLiteral | NullLiteral | UndefinedLiteral;

Object returns Value:
	{Object} '{' (members+=Pair (',' members+=Pair)*)? '}' ;

Pair:
	key=STRING ':' value=Value;

Array returns Value:
	{Array} '[' (items+=Value (',' items+=Value)*)? ']' ;

BooleanLiteral returns Value:
	  {TrueLiteral} 'true'
	| {FalseLiteral} 'false' ;

StringLiteral returns Value:
	{StringLiteral} string=STRING ;

NumberLiteral returns Value:
	{NumberLiteral} number=JSONNUMBER ;

NullLiteral returns Value:
    {NullLiteral} 'null' ;

UndefinedLiteral returns Value:
    {UndefinedLiteral} 'undefined' ;

//Step Definition

WhenStep:
     'when' authorizationSubscription=AuthorizationSubscription;

AuthorizationSubscription:
	'subject'? subject=Value 'attempts' 'action'? action=Value 'on' 'resource'? resource=Value ('in' 'environment'? environment=Object)?;

ErrorValue returns Value:
    {ErrorValue} 'error' ('(' message=STRING ')')?;

ValueOrErrorValue returns Value:
    Value | ErrorValue;

MockDefinition:
	{Function} 'function' name=STRING ('of' parameterMatchers=FunctionParameterMatchers)? 'maps' 'to' returnValue=ValueOrErrorValue ('is' 'called' timesCalled=NumericAmount)? |
	{FunctionInvokedOnce} 'function' name=STRING 'maps' 'to' 'stream' returnValue+=ValueOrErrorValue (',' returnValue+=ValueOrErrorValue)* |
	{Attribute} 'attribute' name=STRING 'emits' returnValue+=ValueOrErrorValue (',' returnValue+=ValueOrErrorValue)* ('with' 'timing' timing=Duration)? |
	{AttributeWithParameters} 'attribute' name=STRING 'of' '<' parentMatcher=ValMatcher '>' (parameterMatchers=AttributeParameterMatchers)? 'emits' returnValue=ValueOrErrorValue |
	{VirtualTime} 'virtual-time';

Environment:
    'environment' environment=Object;

GivenStep:
    MockDefinition | Import;

FunctionParameterMatchers:
    '(' matchers+=ValMatcher (',' matchers+=ValMatcher)* ')';

AttributeParameterMatchers:
    '(' matchers+=ValMatcher (',' matchers+=ValMatcher)* ')';

NumericAmount:
    {Once} 'once' |
    {Multiple} amount=JSONNUMBER 'times';

Duration: duration=STRING;

Expectation:
	{SingleExpect} 'expect' decision=AuthorizationDecision |
	{SingleExpectWithMatcher} 'expect' 'decision' matchers+=AuthorizationDecisionMatcher (',' matchers+=AuthorizationDecisionMatcher)* |
	{RepeatedExpect} expectOrAdjustBlocks+=ExpectOrAdjustBlock+;

ExpectBlock:
    'expect' ('-' expectSteps+=ExpectStep)+;

AdjustBlock:
    'then' ('-' adjustSteps+=AdjustStep)+;

ExpectOrAdjustBlock:
    ExpectBlock | AdjustBlock;

ExpectStep:
	{Next} expectedDecision=AuthorizationDecisionType amount=NumericAmount |
	{NextWithDecision} expectedDecision=AuthorizationDecision |
	{NextWithMatcher} 'decision' matcher+=AuthorizationDecisionMatcher (',' matcher+=AuthorizationDecisionMatcher)* |
	{NoEvent} 'no-event' 'for' duration=Duration;

AdjustStep:
    {AttributeAdjustment} 'attribute' attribute=STRING 'emits' returnValue=Value |
	{Await} 'wait' duration=Duration;

AuthorizationDecision:
    decision=AuthorizationDecisionType ('with' 'obligations' obligations+=Value (',' obligations+=Value)*)? ('with' 'resource' resource=Value)? ('with' 'advice' advice+=Value (',' advice+=Value)*)?;

PdpVariables:
    'pdp' 'variables' pdpVariables=Object;

PdpCombiningAlgorithm:
    'pdp' combiningAlgorithmDefined?='combining-algorithm' combiningAlgorithm=CombiningAlgorithmEnum;

Document:
    {SingleDocument} 'policy' identifier=STRING |
    {DocumentSetWithSingleIdentifier} 'set' identifier=STRING |
    {DocumentSet} 'policies' identifiers+=STRING (',' identifiers+=STRING)+ ('with' 'pdp' 'configuration' pdpConfigurationIdentifier=STRING)?;

Import:
    type=ImportType identifier=STRING;

Given:
    {Given} 'given'
    ('-' document=Document)?
    ('-' pdpVariables=PdpVariables)?
    ('-' pdpCombiningAlgorithm=PdpCombiningAlgorithm)?
    ('-' environment=Environment)?
    ('-' givenSteps+=GivenStep)*;

Requirement:
    'requirement' name=STRING '{'
        (given=Given)?
        (scenarios+=Scenario)+
    '}';

Scenario:
    'scenario' name=STRING (given=Given)? whenStep=WhenStep expectation=Expectation';';
