<!--

    Copyright (C) 2017-2024 Dominic Heutelbeck (dominic@heutelbeck.com)

    SPDX-License-Identifier: Apache-2.0

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
		<groupId>io.sapl</groupId>
		<artifactId>sapl-policy-engine</artifactId>
		<version>3.0.0-SNAPSHOT</version>
		<relativePath />
	</parent>
	<artifactId>sapl-geo</artifactId>
  	<name>SAPL Geo extension</name>

<url>http://maven.apache.org</url>
 
	<properties>
		<geotools.version>31.0</geotools.version>
		<jts.version>1.19.0</jts.version>
		<sapl.version></sapl.version>
	</properties>

	<repositories>
		<!--repository>
			<id>geo</id>
			<url> https://nexus.terrestris.de/repository/public/</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository-->
 		<repository>
			<id>geo</id>
			<url> https://repo.osgeo.org/repository/release/</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
 
  	</repositories>
  
  <dependencyManagement>
		<dependencies>
			<!-- Streaming Attribute Authorization Engine Bill of Materials -->
			<!-- This is a 'Bill of Materials' dependency. It does not directly introduce 
				additional dependencies. This is a utility dependency, making it easier to 
				use SAPL dependencies. Once this BOM has been imported in the <dependencyManagement> 
				section of the POM all SAPL dependencies can be used without explicitly declaring 
				a version. This ensures that when multiple SAPL dependencies are used, the 
				versions of them are consistent. -->
			<dependency>
				<groupId>io.sapl</groupId>
				<artifactId>sapl-bom</artifactId>
				<version>3.0.0-SNAPSHOT</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>3.2.2</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

  
 	<dependencies>
 	
		<dependency>
			<groupId>io.sapl</groupId>
			<artifactId>sapl-lang</artifactId>			
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>io.sapl</groupId>
			<artifactId>sapl-extensions-api</artifactId>			
		</dependency>

		<dependency>
		    <groupId>org.postgresql</groupId>
		    <artifactId>r2dbc-postgresql</artifactId>
		</dependency>
		
		<dependency>
		    <groupId>io.asyncer</groupId>
		    <artifactId>r2dbc-mysql</artifactId>
		</dependency>
				
		<dependency>
    		<groupId>org.geotools</groupId>
    		<artifactId>gt-geojson</artifactId>
    		<version>${geotools.version}</version>
		</dependency>
		<dependency>
		    <groupId>org.geotools.xsd</groupId>
		    <artifactId>gt-xsd-kml</artifactId>
		    <version>31.0</version>
		</dependency>

		<dependency>
			<groupId>org.geotools</groupId>
			<artifactId>gt-epsg-hsql</artifactId>
			<version>${geotools.version}</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.locationtech.spatial4j/spatial4j -->
		<dependency>
		    <groupId>org.locationtech.spatial4j</groupId>
		    <artifactId>spatial4j</artifactId>
		    <version>0.8</version>
		</dependency>
		<dependency>
		    <groupId>org.locationtech.jts.io</groupId>
		    <artifactId>jts-io-common</artifactId>
		    <version>${jts.version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>
	
		
		<dependency>
	      <groupId>org.junit.jupiter</groupId>
	      <artifactId>junit-jupiter</artifactId>
	      <scope>test</scope>
   	   </dependency>
	    <dependency>
		    <groupId>org.testcontainers</groupId>
		    <artifactId>testcontainers</artifactId>
		    <scope>test</scope>
	    </dependency>
	    <dependency>
		    <groupId>org.testcontainers</groupId>
		    <artifactId>postgresql</artifactId>
		    <scope>test</scope>
		</dependency>
		<dependency>
		    <groupId>org.testcontainers</groupId>
		    <artifactId>mysql</artifactId>
		    <scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.mysql/mysql-connector-j -->
		<dependency>
		    <groupId>com.mysql</groupId>
		    <artifactId>mysql-connector-j</artifactId>
			<scope>test</scope>
		</dependency>

	    <dependency>
		    <groupId>org.testcontainers</groupId>
		    <artifactId>junit-jupiter</artifactId>
		    <scope>test</scope>
		</dependency>
	    
	    <dependency>
		    <groupId>xmlunit</groupId>
		    <artifactId>xmlunit</artifactId>
		    <version>1.6</version>
		    <scope>test</scope>
		</dependency>

		<dependency>
		    <groupId>io.projectreactor</groupId>
		    <artifactId>reactor-test</artifactId>
		    <scope>test</scope>
		    
		</dependency>
		
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			
		</dependency>

		<dependency>
			<!-- If you want to use the extensions in a Spring application and do 
				want to supply configuration of the extensions Beans using annotations like 
				@Component, these annotations must be available via this dependency. For 
				building a slide-loading JAR, declare the scope to be 'provided' so that 
				these do not end up in the fat JAR. Also, side-loading into an existing SAPL 
				server means that you should actually use Spring annotations to configure 
				your PDP. -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<scope>provided</scope>
		</dependency>

 	</dependencies>

</project>
